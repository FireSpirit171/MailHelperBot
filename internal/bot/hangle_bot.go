package bot

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func handleCommand(bot *Bot, msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		handleStartCommand(bot, msg)
	case "login":
		handleLoginCommand(bot, msg)
	case "status":
		handleStatusCommand(bot, msg)
	case "logout":
		handleLogoutCommand(bot, msg)
	default:
		reply := tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§î")
		_, err := bot.Api.Send(reply)
		if err != nil {
			log.Printf("Error sending message: %v", err)
		}
	}
}

func handleMessage(bot *Bot, msg *tgbotapi.Message) {
	session, err := bot.oauth.GetUserSession(msg.Chat.ID)
	if err != nil {
		log.Printf("Error getting session: %v", err)
		return
	}

	if session != nil && session.AccessToken != "" {
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
		bot.Api.Send(reply)
		return
	}

	reply := tgbotapi.NewMessage(msg.Chat.ID,
		"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login")
	bot.Api.Send(reply)
}

func handleStartCommand(bot *Bot, msg *tgbotapi.Message) {
	text := `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Mail.ru
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞`

	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	_, err := bot.Api.Send(reply)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func handleLoginCommand(bot *Bot, msg *tgbotapi.Message) {
	session, err := bot.oauth.GetUserSession(msg.Chat.ID)
	if err != nil {
		log.Printf("Error getting session: %v", err)
		return
	}

	if session != nil && session.AccessToken != "" {
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")
		bot.Api.Send(reply)
		return
	}

	authURL, _, err := bot.oauth.GenerateAuthURL(msg.Chat.ID)
	if err != nil {
		log.Printf("Error generating auth URL: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Api.Send(reply)
		return
	}

	text := `<b>–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>

1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ
2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Mail.ru
3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ`

	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ParseMode = "HTML"

	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Mail.ru", authURL),
		),
	)
	reply.ReplyMarkup = markup

	_, err = bot.Api.Send(reply)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func handleStatusCommand(bot *Bot, msg *tgbotapi.Message) {
	session, err := bot.oauth.GetUserSession(msg.Chat.ID)
	if err != nil {
		log.Printf("Error getting session: %v", err)
		return
	}

	if session == nil || session.AccessToken == "" {
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
		bot.Api.Send(reply)
		return
	}

	_, err = bot.oauth.GetUserInfo(session.AccessToken)
	if err != nil {
		newToken, err := bot.oauth.RefreshToken(session.RefreshToken)
		if err != nil {
			bot.oauth.storage.DeleteSession(msg.Chat.ID)
			reply := tgbotapi.NewMessage(msg.Chat.ID,
				"–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /login")
			bot.Api.Send(reply)
			return
		}

		userInfo, _ := bot.oauth.GetUserInfo(newToken.AccessToken)
		bot.oauth.SaveUserSession(msg.Chat.ID, newToken, userInfo)
		session.AccessToken = newToken.AccessToken
	}

	text := fmt.Sprintf("‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\nüë§ –ò–º—è: %s\nüìß Email: %s",
		session.Name, session.Email)

	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	bot.Api.Send(reply)
}

func handleLogoutCommand(bot *Bot, msg *tgbotapi.Message) {
	err := bot.oauth.storage.DeleteSession(msg.Chat.ID)
	if err != nil {
		log.Printf("Error deleting session: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
		bot.Api.Send(reply)
		return
	}

	reply := tgbotapi.NewMessage(msg.Chat.ID,
		"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
	bot.Api.Send(reply)
}
